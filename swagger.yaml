openapi: 3.0.2
info:
  description: |-
    Unofficial API documentation for <a href="https://pixelwalker.net" target="_blank">PixelWalker game</a>.
    
    Hopefully PixelWalker developers will change their mind, and expose OpenApi endpoint like this one and maintain it themselves.
    
    Websocket protocol (WSS) can be found <a href="https://github.com/PixelWalkerGame/Protocol" target="_blank">here</a>.
  version: 0.22.0-alpha
  title: PixelWalker API
tags:
  - name: Game
    description: https://game.pixelwalker.net endpoints.
  - name: Api
    description: https://api.pixelwalker.net endpoints.
paths:
  /listroomtypes:
    get:
      servers:
        - url: https://game.pixelwalker.net
      tags:
        - "Game"
      summary: "Gets server version"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
  /listblocks:
    get:
      servers:
        - url: https://game.pixelwalker.net
      tags:
        - "Game"
      summary: "Gets all blocks available in PixelWalker"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/Block'
  /mappings:
    get:
      servers:
        - url: https://game.pixelwalker.net
      tags:
        - "Game"
      summary: "Gets all blocks available in PixelWalker (deprecated, use /listbloocks instead)"
      deprecated: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: "object"
                additionalProperties:
                  type: "number"
  /room/list/{roomType}:
    get:
      servers:
        - url: https://game.pixelwalker.net
      tags:
        - "Game"
      summary: Gets lobby information for room type.
      parameters:
        - in: path
          name: roomType
          schema:
            type: string
          required: true
          description: Room type from /listroomtypes
      responses:
        '200':
          description: Successful operation. Returns a list of lobbies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LobbyResult'
  /api/collections/users/auth-with-password:
    post:
      servers:
        - url: https://api.pixelwalker.net
      tags:
        - "Api"
      summary: Authenticates a user with username/email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                identity:
                  type: string
                  description: The user's username or email address.
                password:
                  type: string
                  description: The user's password.
      responses:
        '200':
          description: Successful authentication.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResultSuccess'
        '400':
          description: Invalid request or credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIFailure'
  /api/joinkey/{roomType}/{roomId}:
    get:
      servers:
        - url: https://api.pixelwalker.net
      tags:
        - "Api"
      summary: Retrieves a join key for a specific room.
      parameters:
        - in: path
          name: roomType
          schema:
            type: string
          required: true
          description: Room type from /listroomtypes
        - in: path
          name: roomId
          schema:
            type: string
          required: true
          description: World ID.
      responses:
        '200':
          description: Successful operation. Returns the join key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinKeyResult'
        '403':
          description: Not authenticated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIFailure'
  /api/collections/worlds/records:
    get:
      servers:
        - url: https://api.pixelwalker.net
      tags:
        - "Api"
      summary: If authenticated, returns all worlds owned by authenticated user. Otherwise, returns all worlds owned by no one(?).
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The page number to retrieve.
        - in: query
          name: perPage
          schema:
            type: integer
            default: 10
          description: The number of items per page.
      responses:
        '200':
          description: Successful operation. Returns the join key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResultWorlds'
  /api/collections/public_profiles/records:
    get:
      servers:
        - url: https://api.pixelwalker.net
      tags:
        - "Api"
      summary: Returns all public profiles.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The page number to retrieve.
        - in: query
          name: perPage
          schema:
            type: integer
            default: 10
          description: The number of items per page.
      responses:
        '200':
          description: Successful operation. Returns the join key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResultPublicProfiles'
  /api/collections/public_worlds/records:
    get:
      servers:
        - url: https://api.pixelwalker.net
      tags:
        - "Api"
      summary: Returns all public worlds.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The page number to retrieve.
        - in: query
          name: perPage
          schema:
            type: integer
            default: 10
          description: The number of items per page.
      responses:
        '200':
          description: Successful operation. Returns the join key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionResultPublicWorlds'
  /api/files/rhrbt6wqhc4s0cp/{worldId}/{worldMinimap}:
    get:
      servers:
        - url: https://api.pixelwalker.net
      tags:
        - "Api"
      summary: Returns minimap image.
      parameters:
        - in: path
          name: worldId
          schema:
            type: string
          required: true
          description: World ID ('id' field from /api/collections/public_worlds/records)
        - in: path
          name: worldMinimap
          schema:
            type: string
          required: true
          description: World Minimap ID ('minimap' field from /api/collections/public_worlds/records)
      responses:
        '200':
          description: Successful operation. Returns the join key.
          content:
            image/png:
              schema:
                type: string
                format: binary
components:
  schemas:
    Block:
      properties:
        Id:
          type: integer
          description: Block ID
        PaletteId:
          type: string
          description: >-
            Useful for mapping, allows you to identify the block in case the numeric ID changes.
            
            This is what they refer to as block name for some reason.
            
            NOTE: There may still be an occasion where the block's name is changed, for eg due to a typo.
        Layer:
          type: integer
          description: 0 for Background, 1 for Foreground.
        BlockDataArgs:
          type: array
          items:
            type: integer
          description: |-
            Array of argument types for block. If this field is not specified, block has no arguments.
            
            Possible argument type values:
            
            - 0: String
            
            - 1: Byte
            
            - 2: Int16
            
            - 3: Int32
            
            - 4: Int64
            
            - 5: Float
            
            - 6: Double
            
            - 7: Boolean
            
            - 8: ByteArray
            
            - 9: Uint32
        MinimapColor:
          type: integer
          description: >-
            Unsigned 32 bit integer.
            
            (If you need the hex string: use .toString(16) with 16 as the radix and trim off the leading FF. To convert it back to number, use parseInt(hexstring, 16))
        LegacyId:
          type: integer
          description: EELVL ID.
        LegacyMorph:
          type: array
          items:
            type: integer
          description: EELVL Block arguments.
      type: object
    LobbyResult:
      type: object
      description: Lobby information.
      properties:
        visibleRooms:
          type: array
          items:
            $ref: '#/components/schemas/LobbyResultWorld'
        onlineRoomCount:
          type: integer
          description: The total number of online worlds.
        onlinePlayerCount:
          type: integer
          description: The total number of online players across all worlds.
    LobbyResultWorld:
      type: object
      description: Information about a specific world.
      properties:
        id:
          type: integer
          description: ID.
        players:
          type: integer
          description: The current number of players in the world.
        max_players:
          type: integer
          description: The maximum number of players allowed in the world.
        data:
          $ref: '#/components/schemas/LobbyResultWorldData'

    LobbyResultWorldData:
      type: object
      description: Additional data associated with the world.
      properties:
        title:
          type: string
          description: The title of the world.
        description:
          type: string
          description: A description of the world.
        owner:
          type: string
          description: Owner of world.
        ownerRole:
          type: string
          description: "Special role of owner. Observed possible values: [admin, committee, dev]. If owner doesn't have role, empty string returned."
        plays:
          type: integer
          description: The number of times this world has been played.
        minimapEnabled:
          type: boolean
          description: Indicates whether the minimap is enabled for this world.
        type:
          type: integer
          description: "The type of the world. Observed possible values: [0, 1, 2]. Educated guesses of type values: 0 - normal worlds, 1 - unsaved worlds, 2 - legacy worlds with prefix 'legacy:' in world id."
    AuthResultSuccess:
      type: object
      description: Successful authentication result.
      properties:
        record:
          $ref: '#/components/schemas/AuthResultData'
          description: User record data.
        token:
          type: string
          description: The authentication token for future requests.

    AuthResultData:
      type: object
      description: User data returned after successful authentication.
      properties:
        banned:
          type: boolean
          description: Indicates if the user is banned.
        collectionId:
          type: string
          description: The ID of the collection the user belongs to.
        collectionName:
          type: string
          description: The name of the collection the user belongs to.
        created:
          type: string
          format: date-time
          description: The date and time entry was created (ISO 8601 format).
        email:
          type: string
          format: email
          description: The user's email address.
        emailVisibility:
          type: boolean
          description: Indicates if the user's email address is visible to others.
        face:
          type: integer
          description: The user's face ID.
        friends:
          type: array
          items:
            type: string
          description: List of user IDs of the user's friends.
        id:
          type: string
          description: ID.
        isSuspicious:
          type: boolean
          description: Indicates if the user is considered suspicious.
        lastSeen:
          type: string
          format: date-time
          description: The date and time the user was last seen (ISO 8601 format).
        lastWorld:
          type: string
          description: The ID of the last world the user was in.
        lastWorldTitle:
          type: string
          description: The title of the last world the user was in.
        role:
          type: string
          description: "Special role of user. Observed possible values: [admin, committee, dev]. If owner doesn't have role, empty string returned."
        updated:
          type: string
          format: date-time
          description: The date and time the user was last updated (ISO 8601 format).
        username:
          type: string
          description: The user's username.
        verified:
          type: boolean
          description: Indicates if the user's email address is verified.

    APIFailure:
      type: object
      description: Validation error details for specific fields.
      properties:
        data:
          type: object
          description: Validation error details for specific fields.
        message:
          type: string
          description: A human-readable error message (e.g., "Failed to authenticate.").
        status:
          type: string
          description: "HTTP code (e.g., '400')."

    FieldError:
      type: object
      description: Details of a validation error for a specific field.
      properties:
        code:
          type: string
          description: The error code (e.g., "validation_required").
        message:
          type: string
          description: A human-readable error message (e.g., "Cannot be blank.").
    JoinKeyResult:
      type: object
      description: The result of the join key request.
      properties:
        token:
          type: string
          description: The join key token. This token is used to join the specified room.
    WorldItem:
      type: object
      properties:
        collectionId:
          type: string
          description: The ID of the collection this world belongs to.
        collectionName:
          type: string
          description: The name of the collection this world belongs to (e.g., "worlds").
        created:
          type: string
          format: date-time
          description: The date and time entry was created (ISO 8601 format).
        data:
          type: string
          description: The filename or identifier of the world data file.
        description:
          type: string
          description: A description of the world.  Can be an empty string.
        height:
          type: integer
          description: The height of the world.
        id:
          type: string
          description: The unique identifier of the world.
        maxPlayers:
          type: integer
          description: The maximum number of players allowed in the world.
        minimap:
          type: string
          description: The filename or identifier of the minimap image.  Can be an empty string if no minimap is available.
        minimapEnabled:
          type: boolean
          description: Indicates whether the minimap is enabled for this world.
        owner:
          type: string
          description: The ID of the user who owns this world.
        plays:
          type: integer
          description: The number of times this world has been played.
        title:
          type: string
          description: The title of the world.
        updated:
          type: string
          format: date-time
          description: The last update timestamp in ISO 8601 format (YYYY-MM-DDTHH:mm:ss.sssZ).
        visibility:
          type: string
          description: The visibility of the world (e.g., "public", "private").
        width:
          type: integer
          description: The width of the world.
    CollectionResultWorlds:
      type: object
      properties:
        items:
          type: array
          description: An array of world items.
          items:
            $ref: '#/components/schemas/WorldItem'
        page:
          type: integer
          description: The current page number.
        perPage:
          type: integer
          description: The number of items per page.
        totalItems:
          type: integer
          description: The total number of items available.
        totalPages:
          type: integer
          description: The total number of pages.
    PublicProfileItem:
      type: object
      properties:
        collectionId:
          type: string
          description: The ID of the collection the user belongs to.
        collectionName:
          type: string
          description: The name of the collection the user belongs to.
        created:
          type: string
          format: date-time
          description: The date and time entry was created (ISO 8601 format).
        face:
          type: integer
          description: The user's face ID.
        id:
          type: string
          description: ID.
        role:
          type: string
          description: "Special role of user. Observed possible values: [admin, committee, dev]. If owner doesn't have role, empty string returned."
        username:
          type: string
          description: The user's username.
    CollectionResultPublicProfiles:
      type: object
      properties:
        items:
          type: array
          description: An array of world items.
          items:
            $ref: '#/components/schemas/PublicProfileItem'
        page:
          type: integer
          description: The current page number.
        perPage:
          type: integer
          description: The number of items per page.
        totalItems:
          type: integer
          description: The total number of items available.
        totalPages:
          type: integer
          description: The total number of pages.
    PublicProfileWorld:
      type: object
      properties:
        collectionId:
          type: string
          description: The ID of the collection this world belongs to.
        collectionName:
          type: string
          description: The name of the collection this world belongs to (e.g., "worlds").
        description:
          type: string
          description: A description of the world.  Can be an empty string.
        height:
          type: integer
          description: The height of the world.
        id:
          type: string
          description: The unique identifier of the world.
        minimap:
          type: string
          description: The filename or identifier of the minimap image.  Can be an empty string if no minimap is available.
        owner:
          type: string
          description: The ID of the user who owns this world.
        plays:
          type: integer
          description: The number of times this world has been played.
        title:
          type: string
          description: The title of the world.
        width:
          type: integer
          description: The width of the world.
    CollectionResultPublicWorlds:
      type: object
      properties:
        items:
          type: array
          description: An array of world items.
          items:
            $ref: '#/components/schemas/PublicProfileWorld'
        page:
          type: integer
          description: The current page number.
        perPage:
          type: integer
          description: The number of items per page.
        totalItems:
          type: integer
          description: The total number of items available.
        totalPages:
          type: integer
          description: The total number of pages.
  securitySchemes:
    ApiKey:
      type: apiKey
      name: Authorization
      in: header
      description: 'JWT token obtained from /api/collections/users/auth-with-password'
security:
  - ApiKey: [ ]